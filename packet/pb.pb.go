// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb.proto

/*
Package packet is a generated protocol buffer package.

It is generated from these files:
	pb.proto

It has these top-level messages:
	Header
	Connect
	ConnAck
	Disconnect
	Publish
	PubAck
	Subscribe
	SubAck
	Unsubscribe
	UnsubAck
	PingReq
	PingResp
*/
package packet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Header struct {
	Dup    bool  `protobuf:"varint,1,opt,name=dup" json:"dup,omitempty"`
	Qos    int32 `protobuf:"varint,2,opt,name=qos" json:"qos,omitempty"`
	Retain bool  `protobuf:"varint,3,opt,name=retain" json:"retain,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Header) GetDup() bool {
	if m != nil {
		return m.Dup
	}
	return false
}

func (m *Header) GetQos() int32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

func (m *Header) GetRetain() bool {
	if m != nil {
		return m.Retain
	}
	return false
}

type Connect struct {
	Header         *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Id             string  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Clean          bool    `protobuf:"varint,3,opt,name=clean" json:"clean,omitempty"`
	ClientId       []byte  `protobuf:"bytes,4,opt,name=clientId,proto3" json:"clientId,omitempty"`
	Username       []byte  `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	Password       []byte  `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	WillTopic      []byte  `protobuf:"bytes,7,opt,name=willTopic,proto3" json:"willTopic,omitempty"`
	WillPayload    []byte  `protobuf:"bytes,8,opt,name=willPayload,proto3" json:"willPayload,omitempty"`
	WillQos        int32   `protobuf:"varint,9,opt,name=willQos" json:"willQos,omitempty"`
	WillRetain     bool    `protobuf:"varint,10,opt,name=willRetain" json:"willRetain,omitempty"`
	KeepaliveTimer int32   `protobuf:"varint,11,opt,name=keepaliveTimer" json:"keepaliveTimer,omitempty"`
}

func (m *Connect) Reset()                    { *m = Connect{} }
func (m *Connect) String() string            { return proto.CompactTextString(m) }
func (*Connect) ProtoMessage()               {}
func (*Connect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Connect) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Connect) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Connect) GetClean() bool {
	if m != nil {
		return m.Clean
	}
	return false
}

func (m *Connect) GetClientId() []byte {
	if m != nil {
		return m.ClientId
	}
	return nil
}

func (m *Connect) GetUsername() []byte {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *Connect) GetPassword() []byte {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *Connect) GetWillTopic() []byte {
	if m != nil {
		return m.WillTopic
	}
	return nil
}

func (m *Connect) GetWillPayload() []byte {
	if m != nil {
		return m.WillPayload
	}
	return nil
}

func (m *Connect) GetWillQos() int32 {
	if m != nil {
		return m.WillQos
	}
	return 0
}

func (m *Connect) GetWillRetain() bool {
	if m != nil {
		return m.WillRetain
	}
	return false
}

func (m *Connect) GetKeepaliveTimer() int32 {
	if m != nil {
		return m.KeepaliveTimer
	}
	return 0
}

type ConnAck struct {
	Header     *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	ReturnCode int32   `protobuf:"varint,2,opt,name=returnCode" json:"returnCode,omitempty"`
}

func (m *ConnAck) Reset()                    { *m = ConnAck{} }
func (m *ConnAck) String() string            { return proto.CompactTextString(m) }
func (*ConnAck) ProtoMessage()               {}
func (*ConnAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConnAck) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ConnAck) GetReturnCode() int32 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

type Disconnect struct {
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Id     string  `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *Disconnect) Reset()                    { *m = Disconnect{} }
func (m *Disconnect) String() string            { return proto.CompactTextString(m) }
func (*Disconnect) ProtoMessage()               {}
func (*Disconnect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Disconnect) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Disconnect) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Publish struct {
	Header    *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MessageId int32   `protobuf:"varint,2,opt,name=messageId" json:"messageId,omitempty"`
	Topic     []byte  `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	Payload   []byte  `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Publish) Reset()                    { *m = Publish{} }
func (m *Publish) String() string            { return proto.CompactTextString(m) }
func (*Publish) ProtoMessage()               {}
func (*Publish) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Publish) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Publish) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *Publish) GetTopic() []byte {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Publish) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type PubAck struct {
	Header    *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MessageId int32   `protobuf:"varint,2,opt,name=messageId" json:"messageId,omitempty"`
}

func (m *PubAck) Reset()                    { *m = PubAck{} }
func (m *PubAck) String() string            { return proto.CompactTextString(m) }
func (*PubAck) ProtoMessage()               {}
func (*PubAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PubAck) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PubAck) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

type Subscribe struct {
	Header    *Header  `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MessageId int32    `protobuf:"varint,2,opt,name=messageId" json:"messageId,omitempty"`
	Topic     [][]byte `protobuf:"bytes,3,rep,name=topic,proto3" json:"topic,omitempty"`
	Qos       []int32  `protobuf:"varint,4,rep,packed,name=qos" json:"qos,omitempty"`
}

func (m *Subscribe) Reset()                    { *m = Subscribe{} }
func (m *Subscribe) String() string            { return proto.CompactTextString(m) }
func (*Subscribe) ProtoMessage()               {}
func (*Subscribe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Subscribe) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Subscribe) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *Subscribe) GetTopic() [][]byte {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Subscribe) GetQos() []int32 {
	if m != nil {
		return m.Qos
	}
	return nil
}

type SubAck struct {
	Header    *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MessageId int32   `protobuf:"varint,2,opt,name=messageId" json:"messageId,omitempty"`
	Qos       []int32 `protobuf:"varint,3,rep,packed,name=qos" json:"qos,omitempty"`
}

func (m *SubAck) Reset()                    { *m = SubAck{} }
func (m *SubAck) String() string            { return proto.CompactTextString(m) }
func (*SubAck) ProtoMessage()               {}
func (*SubAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SubAck) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SubAck) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *SubAck) GetQos() []int32 {
	if m != nil {
		return m.Qos
	}
	return nil
}

type Unsubscribe struct {
	Header    *Header  `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MessageId int32    `protobuf:"varint,2,opt,name=messageId" json:"messageId,omitempty"`
	Topic     [][]byte `protobuf:"bytes,3,rep,name=topic,proto3" json:"topic,omitempty"`
}

func (m *Unsubscribe) Reset()                    { *m = Unsubscribe{} }
func (m *Unsubscribe) String() string            { return proto.CompactTextString(m) }
func (*Unsubscribe) ProtoMessage()               {}
func (*Unsubscribe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Unsubscribe) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Unsubscribe) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *Unsubscribe) GetTopic() [][]byte {
	if m != nil {
		return m.Topic
	}
	return nil
}

type UnsubAck struct {
	Header    *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MessageId int32   `protobuf:"varint,2,opt,name=messageId" json:"messageId,omitempty"`
}

func (m *UnsubAck) Reset()                    { *m = UnsubAck{} }
func (m *UnsubAck) String() string            { return proto.CompactTextString(m) }
func (*UnsubAck) ProtoMessage()               {}
func (*UnsubAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UnsubAck) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *UnsubAck) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

type PingReq struct {
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *PingReq) Reset()                    { *m = PingReq{} }
func (m *PingReq) String() string            { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()               {}
func (*PingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PingReq) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type PingResp struct {
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *PingResp) Reset()                    { *m = PingResp{} }
func (m *PingResp) String() string            { return proto.CompactTextString(m) }
func (*PingResp) ProtoMessage()               {}
func (*PingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PingResp) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "packet.Header")
	proto.RegisterType((*Connect)(nil), "packet.Connect")
	proto.RegisterType((*ConnAck)(nil), "packet.ConnAck")
	proto.RegisterType((*Disconnect)(nil), "packet.Disconnect")
	proto.RegisterType((*Publish)(nil), "packet.Publish")
	proto.RegisterType((*PubAck)(nil), "packet.PubAck")
	proto.RegisterType((*Subscribe)(nil), "packet.Subscribe")
	proto.RegisterType((*SubAck)(nil), "packet.SubAck")
	proto.RegisterType((*Unsubscribe)(nil), "packet.Unsubscribe")
	proto.RegisterType((*UnsubAck)(nil), "packet.UnsubAck")
	proto.RegisterType((*PingReq)(nil), "packet.PingReq")
	proto.RegisterType((*PingResp)(nil), "packet.PingResp")
}

func init() { proto.RegisterFile("pb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcf, 0x6b, 0xdb, 0x30,
	0x18, 0x25, 0x71, 0xe3, 0x1f, 0x5f, 0x46, 0x18, 0x62, 0x0c, 0x31, 0x4a, 0x31, 0x3a, 0x94, 0x9c,
	0x02, 0xeb, 0xfe, 0x82, 0xd1, 0x1c, 0xd6, 0xcb, 0x70, 0xdd, 0xee, 0x3e, 0xd9, 0xfa, 0x68, 0x45,
	0x1c, 0x4b, 0x95, 0xec, 0x95, 0x9e, 0xf6, 0x17, 0xee, 0x7f, 0x1a, 0x92, 0xec, 0x25, 0xec, 0x30,
	0x3c, 0x16, 0x76, 0xd3, 0x7b, 0x2f, 0x7a, 0x5f, 0xbe, 0xf7, 0x90, 0x21, 0xd5, 0xd5, 0x46, 0x1b,
	0xd5, 0x29, 0x12, 0x6b, 0x5e, 0xef, 0xb0, 0x63, 0x5b, 0x88, 0x3f, 0x21, 0x17, 0x68, 0xc8, 0x6b,
	0x88, 0x44, 0xaf, 0xe9, 0x2c, 0x9f, 0xad, 0xd3, 0xd2, 0x1d, 0x1d, 0xf3, 0xa4, 0x2c, 0x9d, 0xe7,
	0xb3, 0xf5, 0xa2, 0x74, 0x47, 0xf2, 0x16, 0x62, 0x83, 0x1d, 0x97, 0x2d, 0x8d, 0xfc, 0xcf, 0x06,
	0xc4, 0x7e, 0xcc, 0x21, 0xb9, 0x56, 0x6d, 0x8b, 0x75, 0x47, 0x2e, 0x21, 0x7e, 0xf4, 0x8e, 0xde,
	0x6a, 0x79, 0xb5, 0xda, 0x84, 0x51, 0x9b, 0x30, 0xa7, 0x1c, 0x54, 0xb2, 0x82, 0xb9, 0x14, 0xde,
	0x3c, 0x2b, 0xe7, 0x52, 0x90, 0x37, 0xb0, 0xa8, 0x1b, 0xe4, 0xa3, 0x75, 0x00, 0xe4, 0x1d, 0xa4,
	0x75, 0x23, 0xb1, 0xed, 0x6e, 0x04, 0x3d, 0xcb, 0x67, 0xeb, 0x57, 0xe5, 0x2f, 0xec, 0xb4, 0xde,
	0xa2, 0x69, 0xf9, 0x1e, 0xe9, 0x22, 0x68, 0x23, 0x76, 0x9a, 0xe6, 0xd6, 0x3e, 0x2b, 0x23, 0x68,
	0x1c, 0xb4, 0x11, 0x93, 0x73, 0xc8, 0x9e, 0x65, 0xd3, 0xdc, 0x2b, 0x2d, 0x6b, 0x9a, 0x78, 0xf1,
	0x40, 0x90, 0x1c, 0x96, 0x0e, 0x14, 0xfc, 0xa5, 0x51, 0x5c, 0xd0, 0xd4, 0xeb, 0xc7, 0x14, 0xa1,
	0x90, 0x38, 0x78, 0xab, 0x2c, 0xcd, 0x7c, 0x36, 0x23, 0x24, 0x17, 0x00, 0xee, 0x58, 0x86, 0x8c,
	0xc0, 0x2f, 0x72, 0xc4, 0x90, 0x4b, 0x58, 0xed, 0x10, 0x35, 0x6f, 0xe4, 0x37, 0xbc, 0x97, 0x7b,
	0x34, 0x74, 0xe9, 0x0d, 0x7e, 0x63, 0xd9, 0x6d, 0x88, 0xf3, 0x63, 0xbd, 0x9b, 0x1c, 0xe7, 0x05,
	0x80, 0xc1, 0xae, 0x37, 0xed, 0xb5, 0x12, 0x38, 0x74, 0x76, 0xc4, 0xb0, 0x2d, 0xc0, 0x56, 0xda,
	0xfa, 0xdf, 0x4a, 0x62, 0xdf, 0x21, 0x29, 0xfa, 0xaa, 0x91, 0xf6, 0x71, 0xb2, 0xc5, 0x39, 0x64,
	0x7b, 0xb4, 0x96, 0x3f, 0xe0, 0x8d, 0x18, 0xfe, 0xd7, 0x81, 0x70, 0xad, 0x77, 0xbe, 0x87, 0xc8,
	0xe7, 0x1c, 0x80, 0x4b, 0x58, 0x0f, 0xf9, 0x87, 0xd2, 0x47, 0xc8, 0x3e, 0x43, 0x5c, 0xf4, 0xd5,
	0xdf, 0x04, 0xf3, 0xc7, 0xf9, 0xec, 0x05, 0xb2, 0xbb, 0xbe, 0xb2, 0xb5, 0x91, 0x15, 0x9e, 0x7e,
	0xa5, 0xe8, 0xb0, 0xd2, 0xf0, 0x98, 0xce, 0xf2, 0x68, 0x78, 0x4c, 0xec, 0x2b, 0xc4, 0x77, 0x27,
	0x5c, 0x65, 0x9c, 0x10, 0x1d, 0x26, 0x48, 0x58, 0x7e, 0x69, 0xed, 0xff, 0x58, 0x8f, 0x15, 0x90,
	0xfa, 0x51, 0xa7, 0x6b, 0xe6, 0x3d, 0x24, 0x85, 0x6c, 0x1f, 0x4a, 0x7c, 0x9a, 0x6a, 0xc8, 0xae,
	0x20, 0x0d, 0x57, 0xac, 0x9e, 0x7a, 0xa7, 0x8a, 0xfd, 0xf7, 0xf0, 0xc3, 0xcf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x40, 0xe5, 0xb5, 0x00, 0x1b, 0x05, 0x00, 0x00,
}
